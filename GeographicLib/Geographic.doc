// -*- text -*-
/**
 * \file Geographic.doc
 * \brief Documentation for GeographicLib
 *
 * Written by Charles Karney <charles@karney.com> and licensed under the
 * LGPL.  For more information, see http://charles.karney.info/geographic/
 **********************************************************************/
// $Id: Geographic.doc 6572 2009-03-01 22:41:48Z ckarney $
/**
\mainpage Geographic library
\author <a href="http://charles.karney.info/">Charles Karney</a>
<charles@karney.com>
\version 2009-03
\date 2009-03-01

\section abstract Abstract

%GeographicLib is a small set of <a href="annotated.html">C++
classes</a> to perform conversions between geographic, UTM, UPS, MGRS,
geocentric, and local cartesian coordinates.  In this application, the
errors are close to round-off (about 5 nm).  It is specialized for use
with the WGS84 but can be adapted for use with other ellipsoids.  In
addition, various properties of the \ref transversemercator are
described and a new accurate algorithm for \ref geodesic is given.

\section download Download

The code is available for download at either of
- http://charles.karney.info/geographic/Geographic.tgz
- http://charles.karney.info/geographic/Geographic.zip
.
(The two archives have identical contents; however, the text files in
the zip archive have Windows-style line endings.)

It is licensed under the LGPL.  For more information, see
http://charles.karney.info/geographic/

\section contents Contents
 - \ref intro
 - \ref start
 - \ref organization
 - \ref transversemercator
   - \ref tmvarious
   - \ref extend
   - \ref testmerc
   - \ref tmerrors
   - \ref tmseries
 - \ref geodesic
   - \ref geoddesc
   - \ref testgeod
   - \ref geoderrors
   - \ref geodtodo
 - \ref geocentric
 - \ref utilities
   - \ref geoconvert
   - \ref transversemercatortest
   - \ref geod
   - \ref cartconvert
 - \ref old

<center>
Forward to \ref intro.
</center>

**********************************************************************/
/**
\page intro Introduction

<center>
Forward to \ref organization.  Up to \ref contents.
</center>

%GeographicLib offers a C++ interfaces to a small (but important!) set of
geographic transformations.  It grew out of a desire to improve on the
<a href="http://earth-info.nima.mil/GandG/geotrans/">geotrans</a>
package for transforming between geographic and MGRS coordinates.  At
present, %GeographicLib provides UTM, UPS, MGRS, geocentric, and local
cartesian projections, and classes for geodesic calculations.

The goals of %GeographicLib are:
 - Accuracy.  In most applications the accuracy is close to round-off,
   about 5 nm.  Even though in many geographic applications 1 cm is
   considered "accurate enough", there is little penalty in providing
   much better accuracy.  If situations where a faster approximate
   algorithm is necessary, %GeographicLib offers an accurate benchmark to
   guide the development.
 - Completeness.  For each of the projections included, an attempt is
   made to provide a complete solution.  For example,
   GeographicLib::Geodesic::Inverse works for anti-podal points.
   Similarly, GeographicLib::Geocentric.Reverse will return accurate
   geodetic coordinates even for points close to the center of the
   earth.
 - C++ interface.  For the projection methods, this allows encapsulation
   of the ellipsoid parameters.
 - Emphasis on projections necessary for analysing military data.
 - Uniform treatment of UTM/UPS.  The GeographicLib::UTMUPS class treats
   UPS as zone 0.  This simplifies conversions between UTM and UPS
   coordinates, etc.
 - Well defined and stable conventions for the conversion between
   UTM/UPS to MGRS coordinates.
 - Detailed internal documentation on the algorithms.  For the most part
   %GeographicLib uses published algorithms and references are given.  If
   changes have been made (usually to improve the numerical accuracy),
   these are described in the code.

Various \ref utilities are provided with the library.  These illustrate
the use of the library and are useful in their own right.  This library
and the utilities have been tested with g++ 4.3 under Linux and with MS
Visual Studio 2005

The section \ref transversemercator documents various properties of this
projection.

Undoubtedly, bugs lurk in this code and in the documentation.  Please
report any you find to <charles@karney.com>.

<center>
Forward to \ref start.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page start Getting Started

<center>
Back to \ref intro.  Forward to \ref organization.  Up to \ref contents.
</center>

The following steps will get you started with %GeographicLib:
 - Download the <a
   href="http://charles.karney.info/geographic/Geographic.tgz">source</a>.
 - Unpack the tar file somewhere convenient with, e.g.,
   - tar xfpvz Geographic.tgz
   .
   This will create a %GeographicLib directory.
 - Change to the %GeographicLib directory
   - cd %GeographicLib
 - Create the utility programs and (optionally) the documentation
   - make all doc
 - GeographicLib.sln is MS Visual Studio 2005 solution file which
   compiles the library and the utility programs under Windows.
 - Try out \ref geoconvert (for help, type ./GeoConvert -h)
   - echo 33.3 44.4 | ./GeoConvert -m -p -3
   - echo 38SMB4484 | ./GeoConvert -d
 - Similarly, try out \ref transversemercatortest, \ref geod, and
   \ref cartconvert.
 - Read the section, \ref organization, for an overview of the library.
 - Browse the <a href="annotated.html">Class List</a> for full documentation
   on the library.
 - Read the section, \ref transversemercator, for more information on
   this projection.

Here's a list of some of the abbreviations used here with links to the
corresponding Wikipedia articles:
 - <a href="http://en.wikipedia.org/wiki/WGS84">
   WGS84</a>, World Geodetic System 1984.
 - <a href="http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system">
   UTM</a>, Universal Transverse Mercator coordinate system.
 - <a href="http://en.wikipedia.org/wiki/Universal_Polar_Stereographic">
   UPS</a>, Universal Polar Stereographic coordinate system.
 - <a href="http://en.wikipedia.org/wiki/Military_grid_reference_system">
   MGRS</a>, Military Grid Reference System.

<center>
Back to \ref intro.  Forward to \ref organization.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page organization Code organization

<center>
Back to \ref start.  Forward to \ref transversemercator.  Up to \ref contents.
</center>

Here is a brief description of the relationship between the various
components of %GeographicLib.

GeographicLib::TransverseMercator and GeographicLib::PolarStereographic
provide the basic projections.  The constructors for these classes
specify the ellipsoid and the forward and reverse projections are
implemented as const member functions.  TransverseMercator uses
Kr&uuml;ger's series which have been extended to sixth order in the
square of the eccentricity.  PolarStereographic uses the exact formulas
for the projection (from Snyder).

GeographicLib::TransverseMercator::UTM and
GeographicLib::PolarStereographic::UPS are const static instantiations
specific for the WGS84 ellipsoid with the UTM and UPS scale factors.
(These do \e not add the standard false eastings or false northings for
UTM and UPS.)

GeographicLib::UTMUPS uses TransverseMercator::UTM and
PolarStereographic::UPS to perform the UTM and UPS
projections.  The class offers a uniform interface to UTM and UPS by
treating UPS as UTM zone 0.  This class stores no internal state and the
forward and reverse projections are provided via static member
functions.  The forward projection offers the ability to override the
standard UTM/UPS choice and the UTM zone.

GeographicLib::MGRS transforms between UTM/UPS coordinates and MGRS.
UPS coordinates are handled as UTM zone 0.  This class stores no
internal state and the forward (UTM/UPS to MGRS) and reverse (MGRS to
UTM/UPS) conversions are provided via static member functions.

GeographicLib::GeoCoords holds a single geographic location which may be
specified as latitude and longitude, UTM or UPS, or MGRS.  Member
functions are provided to convert between coordinate systems and to
provide formatted representations of them.

\ref geoconvert is a simple command line utility to provide access to
the GeoCoords class.

GeographicLib::TransverseMercatorExact is a drop in replacement for
TransverseMercator which uses the exact formulas, based on elliptic
functions, for the projection as given by Lee.  \ref
transversemercatortest is a simple command line utility to test to the
TransverseMercator and TransverseMercatorExact.

GeographicLib::Geodesic and GeographicLib::GeodesicLine perform geodesic
calculations.  The constructor for GeographicLib::Geodesic specifies the
ellipsoid and the direct and inverse calculations are implemented as
const member functions.  GeographicLib::Geocentric::WGS84 is a const
static instantiation of Geodesic specific for the WGS84 ellipsoid.  In
order to perform a series of direct geodesic calculations on a single
line, the GeographicLib::GeodesicLine class can be used.  This packages
all the information needed to specify a geodesic.  A const member
function returns the coordinates a specified distance from the starting
point.  \ref geod is a simple command line utility to perform geodesic
calculations.

GeographicLib::Geocentric and GeographicLib::LocalCartesian convert between
geodetic and geocentric or a local cartesian system.  The constructor for
specifies the ellipsoid and the forward and reverse projections are
implemented as const member functions.  GeographicLib::Geocentric::WGS84 is a
const static instantiation of Geocentric specific for the WGS84 ellipsoid.
\ref cartconvert is a simple command line utility to provide access to
these classes.

GeographicLib::Constants, GeographicLib::DMS, and
GeographicLib::EllipticFunction are utility classes which are used
internally by the library.

In order to avoid name clashes, all there classes are in the
GeographicLib namespace.  The header files are included with the
GeographicLib/ directory prefix.  If compiling within the %GeographicLib
directory, ".." should be included in the header search path (e.g.,
with -I..).  The cpp files implementing the classes include "using
namespace std;", however, for portability, the headers files and the
test programs do not.

There's an "install" target in the Makefile which installs the library
components into \$(PREFIX)/lib, \$(PREFIX)/include/GeographicLib,
\$(PREFIX)/bin.  Once installed, the library can be used by setting
  - CPPFLAGS=-I\$(PREFIX)/include
  - LDFLAGS=-L\$(PREFIX)/lib -lGeographic
  .
in the Makefile.

The low level projection classes, TransverseMercator and
PolarStereographic, do not throw exceptions.  UTMUPS, MGRS, and
GeoCoords all check their arguments and throw std::out_of_range
exceptions with a explanatory message.  See GeoConvert.cpp for an
example of how exceptions can be handled.

<center>
Back to \ref start.  Forward to \ref transversemercator.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page transversemercator Transverse Mercator Projection

<center>
Back to \ref organization.  Forward to \ref geodesic.  Up to \ref contents.
</center>

\b NOTE: The figures in this section are relatively small in order to
allow them to be displayed quickly.  The "Fig. N" link beneath each
figure points to a PDF version of the figure.  These are in vector
format and allow the figures to be magnified to show the details more
clearly.

The primary sources for the material presented here are:
 - J. P. Snyder,
   <a href="http://pubs.er.usgs.gov/usgspubs/pp/pp1395">Map Projections: A
   Working Manual</a>,
   USGS Professional Paper 1395 (1987), pp. 48&ndash;66.
   This contains an overview of the transverse Mercator projection (and
   many other projections). However, the approximations given for
   this projection are rather crude.  The terminology for the various
   transverse Mercator map projections is taken form J. P. Snyder,
   Flattening the Earth (Chicago Univ. Press, 1993).
 - L. Kr&uuml;ger, <a
   href="http://dx.doi.org/10.2312/GFZ.b103-krueger28"> Konforme
   Abbildung des Erdellipsoids in der Ebene</a> (Conformal mapping of
   the ellipsoidal earth to the plane), Royal Prussian Geodetic Institute,
   New Series 52, 172 pp. (1912).
   The derives the series solution for the transverse Mercator
   projection of an ellipsoid.  This gives very good accuracy and this
   method or an extension of it to higher-order provides the most accurate
   algorithms for the projection valid in some zone near the central
   meridian.  It is also of interest to see the systematic use of
   logarithms in the pre-electronic and pre-mechanical age (when
   computers were human).
 - <a href="http://www.jhs-suositukset.fi/suomi/jhs154">JHS 154, ETRS89 -
   j&auml;rjestelm&auml;&auml;n liittyv&auml;t karttaprojektiot,
   tasokoordinaatistot ja karttalehtijako</a> (Map projections, plane
   coordinates, and map sheet index for ETRS89), published by JUHTA, Finnish
   Geodetic Institute, and the National Land Survey of Finland (2006).
   A concise summary of Kr&uuml;ger's method is given in
   <a href="http://docs.jhs-suositukset.fi/jhs-suositukset/JHS154/JHS154_liite1.pdf">
   Appendix 1</a>.
 - L. P. Lee,
   Conformal Projections Based on Elliptic Functions,
   (B. V. Gutsell, Toronto, 1976), 128pp.,
   ISBN: 0919870163
   (Also appeared as:
   Monograph 16, Suppl. No. 1 to Canadian Cartographer, Vol 13).
   Part V, pp. 67&ndash;101,
   <a href="http://dx.doi.org/10.3138/X687-1574-4325-WM62">Conformal
   Projections Based On Jacobian Elliptic Functions</a>, gives closed
   form expressions for the transverse Mercator projection based on work
   by Thompson (1945).  This may be purchased for a modest sum.  Other
   useful sections are Part I, pp. 1&ndash;3 and Part II, pp. 4&ndash;14.
 - M. Abramowitz and I. A. Stegun,
   Handbook of Mathematical Functions
   (Dover, 1965).
   This is the bible for special functions.  It is easily accessible on
   the web.  Chapter 16 covers elliptic functions and Chapter 17 covers
   elliptic integrals.
 .

\section tmvarious Survey of transverse Mercator projections

The following is adapted from Lee (1976) particularly pp. 92&ndash;101.
The terminology is from Snyder (1993) pp. 159&ndash;161.

The transverse Mercator projection is a conformal projection of the
ellipsoid in which the central meridian is straight.  Within these
constrains there are various projections that differ in how the scale
varies along the central meridian.  The simplest such projection from an
algorithmic point of view is the Gauss-Schreiber projection which consists
of a conformal projection from the ellipsoid to a sphere followed by the
spherical transverse Mercator projection.  This results in a projection
whose scale on the central meridian increases from the equator to the
pole (by an amount proportional to the flattening).  In the
Gauss-Kr&uuml;ger projection, the scale along the central meridian is
held constant.  This projection is usually expressed as a series which
is valid only sufficiently close to the central meridian.  (This is
implemented by GeographicLib::TransverseMercator.)  The projection can
however be expressed in closed form in terms of the Thompson transverse
Mercator projection (where the scale along the central meridian
decreases from the equator to the pole by an amount proportional to the
flattening).  (This method of computing the Gauss-Kr&uuml;ger projection
is implemented by GeographicLib::TransverseMercatorExact.)

The graticules (lines of constant latitude and longitude) for all these
projections are shown in Figs. 1&ndash;3.  These figures all use an
ellipsoid with eccentricity \e e = 1/10 (inverse flattening = 10 (3
sqrt(11) + 10) = 199.5, i.e., somewhat flatter than the WGS84 ellipsoid)
and the projections have all been scaled so that the distance from the
equator to the north pole is unity.  One eighth of the ellipsoid is
shown in these figures, 0<sup>o</sup> <= latitude <= 90<sup>o</sup> and
0<sup>o</sup> <= longitude <= 90<sup>o</sup>.  To obtain the graticule
for the entire ellipsoid reflect these figures in \e x = 0, \e y = 0,
and \e y = 1.  The blue lines show latitude and longitude at multiples
of 10<sup>o</sup>.  The green lines show 1<sup>o</sup> intervals for
longitude in [80, 90] and latitude in [0, 10].  In all three figures,
longitude = 0<sup>o</sup> lies on \e x = 0 and longitude =
90<sup>o</sup> lies on \e y = 1.

<center>
<img src="gauss-schreiber-graticule-a.png"
width=667 height=305 alt="Gauss-Schreiber transverse Mercator graticule
(scaled)">
<a href="gauss-schreiber-graticule-a.pdf">Fig. 1</a>
</center>\n
The graticule for the Gauss-Schreiber transverse Mercator projection.
The equator lies on \e y = 0.
Compare this with Lee, Fig. 1 (right), which shows the graticule for
half a sphere, but note that in his notation \e x and \e y have switched
meanings.  The graticule for the ellipsoid differs from that for a
sphere only in that the latitude lines have shifted slightly.  (The
conformal transformation from an ellipsoid to a sphere merely relabels
the lines of latitude.)  This projection places the point latitude =
0<sup>o</sup>, longitude = 90<sup>o</sup> at infinity.

<center>
<img src="gauss-krueger-graticule-a.png"
width=667 height=305 alt="Gauss-Krueger transverse Mercator graticule
(scaled)">
<a href="gauss-krueger-graticule-a.pdf">Fig. 2</a>
</center>\n
The graticule for the Gauss-Kr&uuml;ger transverse Mercator projection.
The equator lies on \e y = 0 for longitude < 81<sup>o</sup>; beyond
this, it arcs up to meet \e y = 1.  Compare this with Lee, Fig. 45
(upper), which shows the graticule for the International Spheroid.  Lee,
Fig. 46, shows the graticule for the entire ellipsoid.  This projection
(like the Thompson projection) projects the ellipsoid to a finite area.

<center>
<img src="thompson-tm-graticule-a.png"
width=667 height=305 alt="Thompson transverse Mercator graticule
(scaled)">
<a href="thompson-tm-graticule-a.pdf">Fig. 3</a>
</center>\n
The graticule for the Thompson transverse Mercator projection.  The
equator lies on \e y = 0 for longitude < 81<sup>o</sup>; at longitude =
81<sup>o</sup>, it turns by 120<sup>o</sup> and heads for \e y = 1.
Compare this with Lee, Fig. 43, which shows the graticule for the
International Spheroid.  Lee, Fig. 44, shows the graticule for the
entire ellipsoid.  This projection (like the Gauss-Kr&uuml;ger
projection) projects the ellipsoid to a finite area.

Of the three transverse Mercator projections given here the
Gauss-Kr&uuml;ger projection is by far the most important.  It is the
basis of the UTM system.  If "transverse Mercator projection" is used
without further elaboration, then, nearly always, it refers to
the Gauss-Kr&uuml;ger projection.

\section extend Properties far from the central meridian

The divergent behavior of the Gauss-Schreiber projection as latitude =
0<sup>o</sup>, longitude = 90<sup>o</sup> is approached is unsurprising
given the behavior of the standard Mercator projection at the poles.  On
the other hand, the lack of divergence in the Gauss-Kr&uuml;ger
projection (and similarly in the Thompson projection) is perhaps
puzzling.  We explore the behavior more carefully in this section.

Firstly, the Gauss-Kr&uuml;ger projection \e does have a singularity at
latitude = 0<sup>o</sup> and longitude < 90<sup>o</sup>(1 - \e e), where
\e e is the eccentricity of the ellipsoid.  The choice of \e e = 1/10
for Figs. 1&ndash;3 was made to ensure that one of the graticule lines
(longitude = 81<sup>o</sup>) covered this singularly.  The singularly is
relatively benign.  The Thompson projection contains a cube root
singularity with causes the corner in the equator.  The transformation
from Thompson to Gauss-Kr&uuml;ger "repairs" this to lowest order so
that there's no kink in the equation.  Nevertheless, a weaker
singularity remains (causing a discontinuous change in the radius of
curvature for the equator).  Thus Gauss-Kr&uuml;ger has a branch point
at latitude = 0<sup>o</sup> and longitude < 90<sup>o</sup>(1 - \e e) and
the projection is analytic provided this point is avoided.  However the
results obtained for the projection will depend on which sheet of the
projection is used or which route around the branch point is taken.

The "standard" convention for projecting a geographic position is to
follow the central meridian from the equator to the target latitude,
then to follow the line of constant latitude to the target longitude.
This is equivalent to placing two branch cuts on the equator in the
longitude ranges +/- [90<sup>o</sup>(1 - \e e), 90<sup>o</sup>(1 + \e
e)].  For points on equator for |longitude| > 90<sup>o</sup>(1 - \e e),
the path should go to the north of branch point.  This convention
corresponds to Fig. 2, above, after suitable reflections to cover the
ellipsoid and to Lee, Fig. 46.

In order to explore the behavior to the right of the equator in Fig. 2,
we define an "extended" domain for the projection, this consists of the
union of
 - 0<sup>o</sup> <= latitude <= 90<sup>o</sup> and
   0<sup>o</sup> <= longitude <= 90<sup>o</sup>
 - -90<sup>o</sup> < latitude <= 0<sup>o</sup> and
   90<sup>o</sup>(1 - \e e) <= longitude <= 90<sup>o</sup>
 .
The rule for reaching the second area here is to move on the central
meridian to a small positive latitude, move at constant latitude to the
target longitude and then to move on a meridian to the target latitude.
In this case, the branch cut emanates in a south-westerly direction from
the branch point.  Following this prescription the range of the
projection now consists of the union of
 - 0 <= \e x and
   0 <= \e y/(\e k<sub>0</sub> \e a) <= E(\e e<sup>2</sup>)
 - K(1 - \e e<sup>2</sup>) - E(1 - \e e<sup>2</sup>)
   <= \e x/(\e k<sub>0</sub> \e a) and \e y <= 0
 .
where \e k<sub>0</sub> is the central scale factor, \e a is the major
radius of the ellipsoid, K and E are complete elliptic integrals.
Setting the optional argument \e extendp = true in the constructor for
GeographicLib::TransverseMercatorExact provides access to this extended
domain.

Figures 4&ndash;5 illustrate the properties of the Gauss-Kr&uuml;ger
transverse Mercator projection in this extended domain.  These figures
use an ellipsoid with eccentricity 1/10 (as in Figs. 1&ndash;3) and with
\e a = 1/E(0.01) = 0.6382 and \e k<sub>0</sub> = 1.  The branch point in
this case lies at lat = 0<sup>o</sup>, lon = 81<sup>o</sup> or \e x =
(K(0.99) - E(0.99))/E(0.01) = 1.71, \e y = 0.

<center>
<img src="gauss-krueger-graticule.png"
width=673 height=323 alt="Gauss-Krueger transverse Mercator
graticule">\n
<a href="gauss-krueger-graticule.pdf">Fig. 4</a>
</center>
Figure 4 shows the graticule the extended domain.  The blue lines show
latitude and longitude at multiples of 10<sup>o</sup>.  The green lines
show 1<sup>o</sup> intervals for longitude in [80, 90] and latitude in
[-5, 10].

<center>
<img src="gauss-krueger-convergence-scale.png"
width=673 height=323 alt="Gauss-Krueger transverse Mercator
convergence and scale">
<a href="gauss-krueger-convergence-scale.pdf">Fig. 5</a>
</center>\n
Figure 5 shows the convergence and scale for the Gauss-Kr&uuml;ger
transverse Mercator projection in the extended domain.  The blue lines
emanating from the top left corner (the north pole) are lines of
constant convergence.  Convergence = 0<sup>o</sup> is given by the
dog-legged line joining the points (0,1), (0,0), (1.71,0), (1.71,-inf).
Convergence = 90<sup>o</sup> is given by the line y = 1.  The other
lines show multiples of 10<sup>o</sup> between 0<sup>o</sup> and
90<sup>o</sup>.  The other blue, the green and the black lines show
scale = 1 thru 2 at intervals of 0.1, 2 thru 15 at intervals of 1, and
15 thru 35 at intervals of 5.  Multiples of 5 are shown in black,
multiples of 1 are shown in blue, and the rest are shown in green.
Scale = 1 is given by the line segment (0,0) to (0,1).  The red line
shows the equator between lon = 81<sup>o</sup> and 90<sup>o</sup>.  The
scale and convergence at the branch point are 1/\e e = 10 and
0<sup>o</sup>, respectively.

Symmetries in the projection can now be employed to extend the
Gauss-Kr&uuml;ger transverse Mercator projection with arbitrary rules
for how to circumvent the branch point.  The symmetries are equivalent
to placing mirrors on the lines segments
 - 0 <= \e x, \e y = 1
 - \e x = 0, 0 <= \e y <= 1
 - 0 <= \e x <= 1.71, \e y = 0
 - \e x = 1.71, \e y <= 0

In order to understand the projection better, it is instructive to
examine the Thompson projection in the extended domain.
<center>
<img src="thompson-tm-graticule.png"
width=661 height=321 alt="Thompson transverse Mercator graticule">
<a href="thompson-tm-graticule.pdf">Fig. 6</a>
</center>\n
Figure 6 shows the graticule for the Thompson transverse Mercator
projection for the extended domain.  The range of the projection is the
rectangular region shown
 - 0 <= \e u <= K(\e e<sup>2</sup>),
   0 <= \e v <= K(1 - \e e<sup>2</sup>)
 .
The coloring of the lines is the same as Fig. 4, except that latitude
lines extended down to -10<sup>o</sup> and a red line has been added
showing the line \e y = 0 for \e x > 1.71 in the Gauss-Kr&uuml;ger
projection (Fig. 4).  The extended Thompson projection figure has
reflection symmetry on all the four sides of Fig. 6.

In transforming from Thompson to Gauss-Kr&uuml;ger, the right angle at
lower right corner of Fig. 6 expands by 3 to 270<sup>o</sup> to produce
the outside corner at \e x = 1.71 and \e y = 0 in Fig. 4.  The top right
corner of Fig. 6 represents the south pole and this is transformed to
infinity in the extended Gauss-Kr&uuml;ger projection.  Despite the
apparent similarities, the behavior of north and south poles in the
extended Thompson projection (top left and top right corners in Fig. 6)
is rather different.  The singularity for the north pole is merely the
result of the singularity of a polar coordinate system (e.g., longitude
is undefined at the north pole).  Encircling the north pole, causes
longitude to increase by 360<sup>o</sup>, as expected.  On the other
hand, encircling the south pole in increasing the longitude by
360<sup>o</sup> \e e = 36<sup>o</sup>.  The same behavior is exhibited
by the extended Gauss-Kr&uuml;ger projection.  The point latitude =
-1<sup>o</sup>, longitude = 90<sup>o</sup> projects to a point [2.65,1]
in Fig. 4.  If we now travel along this latitude line to longitude =
54<sup>o</sup> = 90<sup>o</sup> - 36<sup>o</sup> we arrive back at the
same projected position.  In the extended domain, the Thompson and the
Gauss-Kr&uuml;ger projections are not tightly tied to the globe but can
slip around it longitudinally.

\section testmerc Test data for the transverse Mercator projection

A test set for the transverse Mercator projection is available at
 - http://charles.karney.info/geographic/TMcoords.dat.gz
 .
This is about 17 MB (compressed).  This test set consists of a set of
geographic coordinates together with the corresponding transverse
Mercator coordinates.  The WGS84 ellipsoid is used, with central
meridian 0<sup>o</sup>, central scale factor 0.9996 (the UTM value),
false easting = false northing = 0 m.

Each line of the test set gives 6 space delimited numbers
 - latitude (degrees, exact)
 - longitude (degrees, exact &mdash; see below)
 - easting (meters, accurate to 0.1 pm)
 - northing (meters, accurate to 0.1 pm)
 - meridian convergence (degrees, accurate to 10<sup>-18</sup> deg)
 - scale (accurate to 10<sup>-20</sup>)
 .
The latitude and longitude are all multiples of 10<sup>-12</sup> deg and
should be regarded as exact, except that longitude =
82.63627282416406551 should be interpreted as exactly 90 (1 - \e e)
degrees.  These results are computed using Lee's formulas with
<a href="http://en.wikipedia.org/wiki/Maxima">Maxima</a>'s bfloats and
fpprec set to 80 (so the errors in the data are probably 1/2 of the
values quoted above).  The Maxima code, <a href="tm.mac">tm.mac</a> and
<a href="ellint.mac">ellint.mac</a>, used to prepare this data set is
included in the distribution.  You will need to have Maxima installed to
use this code.  The comments at the top of <a href="tm.mac">tm.mac</a>
illustrate how to run it.

The contents of the file are as follows:
 - 250000 entries randomly distributed in lat in [0, 90], lon in [0, 90];
 - 1000 entries randomly distributed on lat in [0, 90], lon = 0;
 - 1000 entries randomly distributed on lat = 0, lon in [0, 90];
 - 1000 entries randomly distributed on lat in [0, 90], lon = 90;
 - 1000 entries close to lat = 90 with lon in [0, 90];
 - 1000 entries close to lat = 0, lon = 0 with lat >= 0, lon >= 0;
 - 1000 entries close to lat = 0, lon = 90 with lat >= 0, lon <= 90;
 - 2000 entries close to lat = 0, lon = 90 (1 - \e e) with lat >= 0;
 - 25000 entries randomly distributed in lat
   in [-89, 0], lon in [90 (1 - \e e), 90];
 - 1000 entries randomly distributed on lat in [-89, 0], lon = 90;
 - 1000 entries randomly distributed on lat in [-89, 0], lon = 90 (1 - \e e);
 - 1000 entries close to lat = 0, lon = 90 (lat < 0, lon <= 90);
 - 1000 entries close to lat = 0, lon = 90 (1 - \e e)
   (lat < 0, lon <= 90 (1 - \e e));
 .
(a total of 287000 entries).  The entries for lat < 0<sup>o</sup> and
lon in [90<sup>o</sup> (1 - \e e), 90<sup>o</sup>] use the "extended"
domain for the transverse Mercator projection explained in \ref extend.
The first 258000 entries have lat >= 0<sup>o</sup> and are suitable for
testing implementations following the standard convention.

The errors in the forward and reverse projections are converted into a
ground distance (e.g., by dividing the error in the projection by the
scale factor).  The errors in the convergence and in the scale may be
large because these quantities vary rapidly near singular points (for
convergence at the lat = 90<sup>o</sup> and for both convergence and
scale at lat = 0<sup>o</sup>, lon = 90<sup>o</sup> (1 - \e e)).  We
account for this by expressing the error as the sum of a constant and a
term proportional to the gradient of the quantity being measured.

\section tmerrors Accuracy of transverse Mercator projection

Errors in GeographicLib::TransverseMercatorExact.  For both Forward and
Reverse projections
 - error in position < 8 nm
 - error in convergence, \e d(\e gamma) < 2e-15" + 8 nm . grad(\e gamma)
 - relative error in scale, \e dk/\e k < 7e-12%% + 3 nm . grad(\e k)/\e k
 .
These errors apply with the standard convention for the transverse
Mercator projection.  In this case, we use only test samples with
non-negative values of latitude.

For the extended transverse Mercator projection (Fig. 4), the errors
given above apply only for latitude >= -15<sup>o</sup>.  For more negative
latitudes, the errors become large.  For example for latitude >=
-58<sup>o</sup>, the maximum error is 1 mm (and the scale has become 124
million).  This increase in the error is due to the use of the Thompson
projection in the computation.  Looking at the graticule for this
projection (Fig. 6), we see that the Thompson scale becomes small close
to the south pole resulting in errors (measured as a ground distance)
which diverges (the errors vary inversely with scale).  For example at
lat = -58<sup>o</sup>, the scale for the Thompson projection is about
240000 times smaller than on the central meridian and the errors have
increased by about the same factor.  If necessary, this problem could be
avoided by reformulating the Thompson projection to place the origin at
the South pole.

If GeographicLib::TransverseMercatorExact is modified to use long
doubles (a 64-bit floating fraction) instead of of doubles (53-bit
floating fraction) then the error in the position is about 4 pm, for
latitude >= -15<sup>o</sup>.

Errors in GeographicLib::TransverseMercator.  For both Forward and
Reverse projections with easting |\e x| <= 4200 km (approximately within
35<sup>o</sup> of the central meridian) using the 6th-order series
(TM_TX_MAXPOW = 6, the default)
 - error in position < 5 nm
 - error in convergence, \e d(\e gamma) < 7e-10" + 5 nm . grad(\e gamma)
 - relative error in scale, \e dk/\e k < 6e-12%%
 .
The error in the scale does not need to include a grad(\e k) term
because the scale varies smoothly within this region.  If instead we
restrict |\e x| <= 3400 km (approximately within 29<sup>o</sup> of the
central meridian), we get a tighter bound on the convergence
 - error in convergence, \e d(\e gamma) < 2e-15" + 5 nm . grad(\e gamma)
 .
Further from the central meridian, the errors grow rapidly.  For |\e x|
= 10700 km (approx 68<sup>o</sup> from the central median), the error in
position is about 1 mm.  When used in the UTM system, \e x is typically
restricted to |\e x| <= 500 km.  Within |\e x| <= 500 km, the errors
using the 6th-order series are dominated by round-off rather than the
number of terms.  If GeographicLib::TransverseMercator is modified to
use long double instead of double, the error in the position within the
the UTM region is about 4 pm.

If GeographicLib::TransverseMercator is compiled with TM_TX_MAXPOW = 4
to give the 4th-order approximation, then the error is about 210 nm
for |\e x| <= 500 km (the region used for UTM coordinates).

\section tmseries Series approximation for transverse Mercator

Kr&uuml;ger (1912) gives a 4th-order approximation to the transverse
Mercator projection.  The method entails performing first a
Gauss-Schreiber projection and approximating the warp of this to
Gauss-Kr&uuml;ger projection as a series in \e n = (\e a - \e b)/(\e a +
\e b).  This is accurate to about 200 nm within the UTM domain.  Here we
present the series extended to 12th order.  We follow the notation of
JHS 154.

By default, GeographicLib::TransverseMercator uses the 6th-order
approximation. The preprocessor variable TM_TX_MAXPOW can be used to
select an order from 4 thru 8.

In the formulas below ^ indicates exponentiation (\e n^3 = \e n*\e n*\e
n) and / indicates real division (3/5 = 0.6).  The equations need to be
converted to Horner form, but are here left in expanded form so that
they can be easily truncated to lower order in n.  Some of the integers
here are not representable as 32-bit integers and will need to be
included as double literals.

Eq. (01) [\e A in Kr&uuml;ger, p. 12, eq. (5)]
\verbatim
  A1 = a/(n + 1) * (1 + 1/4 * n^2
                      + 1/64 * n^4
                      + 1/256 * n^6
                      + 25/16384 * n^8
                      + 49/65536 * n^10
                      + 441/1048576 * n^12);
\endverbatim

Eqs. (06) [\e beta in Kr&uuml;ger, p. 18, eq. (26*)]
\verbatim
  h[1]   =   1/2 * n
           - 2/3 * n^2
           + 37/96 * n^3
           - 1/360 * n^4
           - 81/512 * n^5
           + 96199/604800 * n^6
           - 5406467/38707200 * n^7
           + 7944359/67737600 * n^8
           - 7378753979/97542144000 * n^9
           + 25123531261/804722688000 * n^10
           - 9280258847/6437781504000 * n^11
           - 1628053924171/99584432640000 * n^12;
  h[2]   =   1/48 * n^2
           + 1/15 * n^3
           - 437/1440 * n^4
           + 46/105 * n^5
           - 1118711/3870720 * n^6
           + 51841/1209600 * n^7
           + 24749483/348364800 * n^8
           - 115295683/1397088000 * n^9
           + 5487737251099/51502252032000 * n^10
           - 5845886411021/41845579776000 * n^11
           + 6339155669701909/46867049349120000 * n^12;
  h[3]   =   17/480 * n^3
           - 37/840 * n^4
           - 209/4480 * n^5
           + 5569/90720 * n^6
           + 9261899/58060800 * n^7
           - 6457463/17740800 * n^8
           + 2473691167/9289728000 * n^9
           - 852549456029/20922789888000 * n^10
           - 2673218294321/191294078976000 * n^11
           - 1619588070701683/35150287011840000 * n^12;
  h[4]   =   4397/161280 * n^4
           - 11/504 * n^5
           - 830251/7257600 * n^6
           + 466511/2494800 * n^7
           + 324154477/7664025600 * n^8
           - 937932223/3891888000 * n^9
           - 89112264211/5230697472000 * n^10
           + 12003335387/32691859200 * n^11
           - 537877266968267441/2249618368757760000 * n^12;
  h[5]   =   4583/161280 * n^5
           - 108847/3991680 * n^6
           - 8005831/63866880 * n^7
           + 22894433/124540416 * n^8
           + 112731569449/557941063680 * n^9
           - 5391039814733/10461394944000 * n^10
           + 4863559943251/167382319104000 * n^11
           + 37588208648677/67596705792000 * n^12;
  h[6]   =   20648693/638668800 * n^6
           - 16363163/518918400 * n^7
           - 2204645983/12915302400 * n^8
           + 4543317553/18162144000 * n^9
           + 54894890298749/167382319104000 * n^10
           - 132058444054073/177843714048000 * n^11
           - 21678380925301381/85364982743040000 * n^12;
  h[7]   =   219941297/5535129600 * n^7
           - 497323811/12454041600 * n^8
           - 79431132943/332107776000 * n^9
           + 4346429528407/12703122432000 * n^10
           + 947319776978297/1625999671296000 * n^11
           - 139564766909992667/115852476579840000 * n^12;
  h[8]   =   191773887257/3719607091200 * n^8
           - 17822319343/336825216000 * n^9
           - 497155444501631/1422749712384000 * n^10
           + 4081516004323/8281937664000 * n^11
           + 3016420810780677019/2994340933140480000 * n^12;
  h[9]   =   11025641854267/158083301376000 * n^9
           - 492293158444691/6758061133824000 * n^10
           - 3340781295639871/6360528125952000 * n^11
           + 230755947172792843/315376186245120000 * n^12;
  h[10]  =   7028504530429621/72085985427456000 * n^10
           - 1396721719354981/13516122267648000 * n^11
           - 242069739433316973869/299733527407362048000 * n^12;
  h[11]  =   20180430688893997/144171970854912000 * n^11
           - 39227670225311092139/261131482210959360000 * n^12;
  h[12]  =   170866240186706518133/831839653739888640000 * n^12;
\endverbatim

Eqs. (07) [\e gamma in Kr&uuml;ger, p. 21, eq. (41)]
\verbatim
  h'[1]  =   1/2 * n
           - 2/3 * n^2
           + 5/16 * n^3
           + 41/180 * n^4
           - 127/288 * n^5
           + 7891/37800 * n^6
           + 72161/387072 * n^7
           - 18975107/50803200 * n^8
           + 60193001/290304000 * n^9
           + 134592031/1026432000 * n^10
           - 1043934033787/3218890752000 * n^11
           + 1107802529272207/5178390497280000 * n^12;
  h'[2]  =   13/48 * n^2
           - 3/5 * n^3
           + 557/1440 * n^4
           + 281/630 * n^5
           - 1983433/1935360 * n^6
           + 13769/28800 * n^7
           + 148003883/174182400 * n^8
           - 705286231/465696000 * n^9
           + 1703267974087/3218890752000 * n^10
           + 490493610499/373621248000 * n^11
           - 1975809888712343/976396861440000 * n^12;
  h'[3]  =   61/240 * n^3
           - 103/140 * n^4
           + 15061/26880 * n^5
           + 167603/181440 * n^6
           - 67102379/29030400 * n^7
           + 79682431/79833600 * n^8
           + 6304945039/2128896000 * n^9
           - 6601904925257/1307674368000 * n^10
           + 35472608886503/41845579776000 * n^11
           + 7660808256523559/1098446469120000 * n^12;
  h'[4]  =   49561/161280 * n^4
           - 179/168 * n^5
           + 6601661/7257600 * n^6
           + 97445/49896 * n^7
           - 40176129013/7664025600 * n^8
           + 138471097/66528000 * n^9
           + 48087451385201/5230697472000 * n^10
           - 634613396309/40864824000 * n^11
           + 152161926556090753/1124809184378880000 * n^12;
  h'[5]  =   34729/80640 * n^5
           - 3418889/1995840 * n^6
           + 14644087/9123840 * n^7
           + 2605413599/622702080 * n^8
           - 31015475399/2583060480 * n^9
           + 5820486440369/1307674368000 * n^10
           + 98568244458947/3678732288000 * n^11
           - 1367520624030470251/29877743960064000 * n^12;
  h'[6]  =   212378941/319334400 * n^6
           - 30705481/10378368 * n^7
           + 175214326799/58118860800 * n^8
           + 870492877/96096000 * n^9
           - 1328004581729009/47823519744000 * n^10
           + 3512873113922087/355687428096000 * n^11
           + 986615629722639449/13133074268160000 * n^12;
  h'[7]  =   1522256789/1383782400 * n^7
           - 16759934899/3113510400 * n^8
           + 1315149374443/221405184000 * n^9
           + 71809987837451/3629463552000 * n^10
           - 52653013293696143/812999835648000 * n^11
           + 101784256296129577/4455864483840000 * n^12;
  h'[8]  =   1424729850961/743921418240 * n^8
           - 256783708069/25204608000 * n^9
           + 2468749292989891/203249958912000 * n^10
           + 117880637749661/2707556544000 * n^11
           - 5921832934345276446697/38926432130826240000 * n^12;
  h'[9]  =   21091646195357/6080126976000 * n^9
           - 67196182138355857/3379030566912000 * n^10
           + 395018924202597949/15446996877312000 * n^11
           + 91220875613845291081/946128558735360000 * n^12;
  h'[10] =   77911515623232821/12014330904576000 * n^10
           - 268897530802721453/6758061133824000 * n^11
           + 8257746726303249815683/149866763703681024000 * n^12;
  h'[11] =   12809767642647461/1029799791820800 * n^11
           - 5303630969873795374429/65282870552739840000 * n^12;
  h'[12] =   2240624428311897034834681/91918281738257694720000 * n^12;
\endverbatim

Eqs. (15), (16), (17), (18), (23), (24), (25), (26) of JHS 154 are
extended in the obvious way.

The formulas for meridian convergence (34) and scale (35) are only good
for small lam (l in the notation of JHS 154).  More accurate expressions
are given here where \e ep2 = \e e'<sup>2</sup> = \e e<sup>2</sup>/(1 -
\e e<sup>2</sup>) (eq. 04).
\verbatim
  double
    c = cos(phi),
    s = sin(lam),
    c2 = c * c,
    s2 = s * s,
    d = 1 - s2 * c2,
    // Accurate to order ep2^2
    carg = 1 + c2 * c2 * s2 / d * ep2 *
    (1 + c2 / (3 * d * d) *
     (2 - s2 * (c2 * ((4 * c2 - 1) * s2 - 9) + 8)) * ep2),
    // Accurate to order ep2
    cabs = 1 + c2 * c2 * s2 * ((c2 - 2) * s2 + 1) / (2 * d * d) * ep2;
  // This replaces (34)
  gamma = atan2(sin(phi) * s * carg, cos(lam));
  // This replaces (35)
  k = cabs/sqrt(d);
\endverbatim

Unfortunately, expansions of this type are much more messy at higher
order.  Therefore, For greater accuracy, directly differentiate the
series involving \e h' or \e h.  The accumulation of the sum can be
carried out at the same time as the transformation itself (and the
calculation slots into a Clenshaw summation very easily).  The
derivatives give the convergence, \e gamma'', and scale, \e k'', of the
[\e xi, \e eta] (Gauss-Kr&uuml;ger) projection relative to [\e xi', \e
eta'] (Gauss-Schreiber) projection and vice versa.  For the full
convergence and scale these need to be compounded with the convergence,
\e gamma', and scale, \e k', of the Gauss-Schreiber projection.
\verbatim
   gamma = gamma' + gamma''
       k = k' * k''
 \endverbatim
gamma' and k' are conveniently expressed as
\verbatim
  gamma' = atan(tan(lam) * sin(beta))
         = atan(tan(lam) * tanh(Q))
         = atan(tan(xi') * tanh(eta'))
      k' = sqrt(1 - e^2 * sin(phi)^2)
           * (cos(beta) / cos(phi)) * cosh(eta')
\endverbatim
where the factors on the last line are can be computed accurately with
\verbatim
 (cos(beta) / cos(phi)) * cosh(eta')
         = cosh(Q') / hypot(sinh(Q), cos(lam))
         = cosh(Q') * hypot(sinh(eta'), cos(xi'))
\endverbatim
These last two expressions preserve accuracy near the pole.  See also
Kr&uuml;ger, pp. 19&ndash;20, eqs. (19) to (33*) and pp 21&ndash;22,
eqs. (43) to (47).  GeographicLib::TransverseMercator uses this approach
to compute the convergence and the scale.

The high-order expansions for \e h and \e h' and the expansions in \e
e'<sup>2</sup> for the convergence and scale were produced by the Maxima
program <a href="tmseries.mac">tmseries.mac</a> (included in the
distribution).  To run, start Maxima and enter
\verbatim
  load("tmseries.mac")$
\endverbatim
Further instructions are included at the top of the file.

<center>
Back to \ref organization.  Forward to \ref geodesic.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geodesic Geodesics on the Ellipsoid

<center>
Back to \ref transversemercator.  Forward to \ref utilities.  Up to \ref contents.
</center>

GeographicLib::Geodesic and GeographicLib::GeodesicLine provide accurate
solutions to the direct and inverse geodesic problems.  The \ref geod
utility provides an interface to these classes.

References
 - T. Vincenty,
   <a href="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
   Solutions of Geodesics on the Ellipsoid with Application of Nested
   Equations</a>,
   Survey Review 22 (176), 88&ndash;93 (1975).
 - E. A. Williams,
   <a href="http://williams.best.vwh.net/ellipsoid/ellipsoid.html">
   Navigation on the Spheroidal Earth</a> (March 2002).

\section geoddesc Description of algorithm

The shortest path between two points on the ellipsoid at (\e lat1, \e
lon1) and (\e lat2, \e lon2) is called the geodesic.  Its length is \e
s12 and the geodesic from point 1 to point 2 has azimuths \e azi1 and \e
azi2 at the two end points.  (The azimuth is the heading measured
clockwise from north.  \e azi2 is the "forward" azimuth, i.e., the
heading that takes you beyond point 2 not back to point 1.)

Given \e lat1, \e lon1, \e azi1, and \e s12, we can determine \e lat2,
\e lon2, \e azi2.  This is the <b>direct</b> geodesic problem.  (If \e s12
is sufficiently large that the geodesic wraps more than halfway around
the earth, there will be a true geodesic between the points with a
smaller \e s12.)

Given \e lat1, \e lon1, \e lat2, and \e lon2, we can determine \e azi1,
\e azi2, \e s12.  This is the <b>inverse</b> geodesic problem.  Usually, the
solution to the inverse problem is unique.  In cases where there are
multiple solutions (all with the same \e s12, of course), all the
solutions can be easily generated once a particular solution is
provided.

On a sphere, the geodesic is a great circle.  On the ellipsoid, the
problem is usually solved by transferring the geodesic to an "auxiliary
sphere" where the latitude \e phi has been replaced by the reduced
latitude \e beta where tan(\e beta) = (1 - \e f) tan(\e phi).  On this
sphere, the geodesic is again a great circle and the azimuth is the same
as on the ellipsoid.  However, the ellipsoidal distance is related to
the great circle distance by an integral; and the ellipsoidal longitude
is similarly related to the longitude on the auxiliary sphere.  Williams
(2002) gives the necessary integrals.

A popular method of doing geodesic calculations is due to Vincenty
(1975).  This entails expanding the integrals in powers of the ellipsoid
flattening, and then solving both the direct and inverse problems by
iteration.  This approach has three drawbacks:
 - The series are cast into a "nested" form which makes them difficult
   to extend to higher order.  This limits the accuracy of this method
   to about 0.5 mm.
 - A simple iteration scheme is employed to solve the equations.  This
   is inelegant and slow.
 - The iteration scheme for the inverse problem is unstable for points
   which are nearly anti-podal.  Thus the method yields no solution in
   this case.
 .
Here we reformulate the geodesic problem with three goals:
 - Accuracy to round-off.  We achieve an accuracy of 12 nm using
   doubles.
 - Always yield a solution.  The direct problem is trivial.  In the
   case of inverse problem, the geodesic is returned.  (And in the event
   that there are multiple geodesics, one of them is returned.)
 - Employ a non-iterative or rapidly converging iterative scheme.

We derive higher-order series for the distance and longitude integrals
using Maxima.  In this release, we use an 8th-order expansion.  The
series is evaluated by a combination of Horner's method and Clenshaw
summation.  For the direct problem, we use a reversion of the series for
the distance to compute the spherical arc length and thereby complete
the solution without the need to iterate.

For the inverse problem, we rearrange the points so that the point 1 is
the one closest to a pole and is in the southern hemisphere and the
point 2 is to the north and east of point 1.  We consider geodesics
leaving point 1 with azimuth \e alpha1 in [0, pi] and we determine the
longitude where these geodesics first intersect the latitude = \e lat2.
The longitude is an increasing function of \e alpha1 and we use Newton's
method to determine the value of \e alpha1 for which the longitude
matches \e lon2.  This then gives the desired geodesic.

\section testgeod Test data for geodesics

A test set a geodesics is available at
 - http://charles.karney.info/geographic/GeodTest.dat.gz
 .
This is about 25 MB (compressed).  This consists of a set of geodesics
for the WGS84 ellipsoid.

Each line of the test set gives 7 space delimited numbers
 - latitude for point 1, \e lat1 (degrees, exact)
 - longitude for point 1, \e lon1 (degrees, always 0)
 - azimuth for point 1, \e azi1 (clockwise from north in degrees, exact)
 - latitude for point 2, \e lat2 (degrees, accurate to 10<sup>-18</sup> deg)
 - longitude for point 2, \e lon2 (degrees, accurate to 10<sup>-18</sup> deg)
 - azimuth for point 2, \e azi2 (degrees, accurate to 10<sup>-18</sup> deg)
 - geodesic distance from point 1 to point 2, \e s12 (meters, exact)
 .
These are computed using as direct geodesic calculations with the given
\e lat1, \e lon1, \e azi1, and \e s12.  The distance \e s12 always
corresponds to an arc length on the auxiliary sphere of pi or less, so
the given geodesics give the shortest paths from point 1 to point 2.
For simplicity and without loss of generality, \e lat1 is chosen in
[0<sup>o</sup>, 90<sup>o</sup>], \e lon1 is taken to be zero, \e azi1
is chosen in [0<sup>o</sup>, 180<sup>o</sup>].  Furthermore, \e lat1 and
\e azi1 are taken to be multiples of 10<sup>-12</sup> deg and \e s12 is
a multiple of 0.1 um in [0 m, 20003931.4586254 m].  This results \e lon2
in [0<sup>o</sup>, 180<sup>o</sup>] and \e azi2 in [0<sup>o</sup>,
180<sup>o</sup>].

The direct calculation uses an expansion of the
geodesic equations accurate to \e f<sup>20</sup> (approximately 1 part
in 10<sup>50</sup>) and is computed with with
<a href="http://en.wikipedia.org/wiki/Maxima">Maxima</a>'s bfloats and
fpprec set to 100 (so the errors in the data are probably 1/2 of the
values quoted above).

The contents of the file are as follows:
 - 100000 entries randomly distributed
 - 50000 entries which are nearly antipodal
 - 50000 entries with short distances
 - 50000 entries with one end near a pole
 - 50000 entries with both ends near opposite poles
 - 50000 entries which are nearly meridional
 - 50000 entries which are nearly equatorial
 - 50000 entries running between vertices (\e azi1 = \e azi2 = 90<sup>o</sup>)
 - 50000 entries ending close to vertices
 .
(a total of 500000 entries).  The values for \e s12 for the geodesics
running between vertices are truncated to a multiple of 0.1 pm and this
is used to determine point 2.

This data can be fed to the Geod utility as follows
 - Direct from point 1:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f1,2,3,7 | ./Geod
\endverbatim
   This should yield columns 4, 5, and 6 of the test set.
 - Direct from point 2:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f4,5,6,7 |
  sed "s/ \([^ ]*$\)/ -\1/" | ./Geod
\endverbatim
   (The sed command negates the distance.)  This should yield columns 1,
   2, and 3 of the test set.
 - Inverse between points 1 and 2:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f1,2,4,5 | ./Geod -i
\endverbatim
   This should yield columns 3, 6, and 7 of the test set.
 .
Add, e.g., "-p 6", to the call to Geod to change the precision of the
output.  Adding "-f" causes Geod to print all 7 fields specifying the
geodesic (in the same order as the test set).

Another much smaller set of test points has been culled from the
literature on geodesics.  These are all for the International Ellipsoid
(\e a = 6378388 m, \e f = 1/297.0).  The endpoints are taken from
 - R. H. Rapp, <a href="http://hdl.handle.net/1811/24409">Geometric
   geodesy, Part II</a>, Ohio State Univ. (March 1993).
 - T. Saito, <a href="http://dx.doi.org/10.1007/BF02521087">The
   computation of long geodesics on the ellipsoid through Gaussian
   quadrature</a>,
   Journal of Geodesy 53, 165&ndash;177 (1979).
 - B.K. Meade, Discussion of results obtained from the Bowring formulas
   developed for solutions of the geodetic inverse and great elliptic
   inverse, Survey Review 33 (261) 477&ndash;487 (1996).
 .
However some of the results quoted for the inverse problem in these
papers are inaccurate.  Accurate data are given here.  The end points
are
\verbatim
No     lat1              lat2            lon2 - lon1

00 37d19'54.95367"   26d07'42.83946"   41d28'35.50729"
01 35d16'11.24862"   67d22'14.77638"  137d47'28.31435"
02  1d00'00"         -0d59'53.83076"  179d17'48.02997"
03  1d00'00"          1d01'15.18952"  179d46'17.84244"
04 41d41'45.88"     -41d41'46.20"     179d59'59.44"
05  0d00'00"          0d00'00"        179d41'49.78063"
06 30d00'00"        -30d00'00"        179d40'00"
07 60d00'00"        -59d59'00"        179d50'00"
08 30d00'00"        -29d50'00"        179d48'00"
09 30d00'00"        -29d55'00"        179d48'00"
10 34d28'44.76421"  -34d28'44.76421"  179d30'00"
11  0d00'00"          0d00'00"        179d23'38.18182"
12 34d28'44.764213" -34d28'44.764213" 179d30'00"
13 56d41'58.297496" -56d41'58.297496" 179d40'00"
14 29d45'00"         29d45'00.23848"    0d00'00.25626"
15 41d41'45.88"      41d41'46.2"        0d00'00.56"
16 46d00'00"         46d00'01"          0d00'01.816"
17 40d00'00"         40d00'02"          0d00'04.75"
18 38d00'00"         38d00'04.765"      0d00'05.554"
19 30d00'00"         37d53'32.46584"  116d19'16.68843"
20 30d19'54.95367"  -30d11'50.15681"  179d58'17.84244"
21  0d39'49.12586"   -0d45'14.13112"  179d58'17.84244"
22  0d00'54.95367"    0d00'42.83946"  179d28'17.84244"
23 40d00'00"        -40d00'05.75932"  179d55'15.59578"
24 37d00'00"         28d15'36.69535"    2d37'39.52918"
25 38d30'45"        -35d25'35"        179d45'00"
26 60d00'00"        -60d00'00"        179d41'47"
\endverbatim
and the geodesics are given by
\verbatim
No      azi1                      azi2                      s12

00  95d27'59.63088905553491" 118d05'58.96160858886728"  4085966.7025902201825
01  15d44'23.74849770324814" 144d55'39.92147266777383"  8084823.8382961415712
02  88d59'59.99897053696689"  91d00'06.11835637659787" 19959999.9998034962728
03   4d59'59.9999565312182"  174d59'59.88480004914149" 19780006.5587880182731
04 179d58'49.16247860972594"   0d01'10.83761892414861" 20004566.7228054132931
05  30d00'00.00002084815889" 149d59'59.99997915184111" 19996147.416826781925
06  39d24'51.80601183179472" 140d35'08.19398816820528" 19994364.6068583984182
07  29d11'51.07006518417487" 150d49'06.86792886226858" 20000433.9629039632049
08  16d02'28.33895348073478" 163d59'10.33689436714454" 19983420.1535833515076
09  18d38'12.55689701007199" 161d22'45.43724069005652" 19992241.7634404403113
10  89d59'59.78608904242135"  90d00'00.21391095757865" 19981603.2781440234735
11  89d59'51.5863776476884"   90d00'08.4136223523116"  19970827.8695289752144
12  90d00'00.00000000479721"  90d00'00.00000000479721" 19981603.2781440234735
13  90d00'00.0000006754891"   90d00'00.0000006754891"  19994364.6068583984183
14  43d09'29.0634310812721"   43d09'29.19059165112047"       10.0665488514951
15  52d40'39.39067110974434"  52d40'39.76317180931766"       16.2839750636094
16  51d41'11.54166708300919"  51d41'12.8479912183896"        49.8037586266135
17  61d18'00.21784992705284"  61d18'03.27110871411274"      128.4581417556041
18  42d41'10.35602545797828"  42d41'13.77545984493403"      199.8717376568129
19  45d00'00.00000438165649" 129d08'12.32600911217221" 10002499.999860115911
20   2d23'52.10812966032674" 177d36'19.67010864697937" 19989590.5480170316779
21 177d39'39.01010365081902"   2d20'21.15303599834387" 19994529.4454322340309
22  54d08'27.73161935117439" 125d51'32.27232710890937" 19977290.7711390609949
23 170d15'10.8812277902834"    9d44'49.94565915545135" 20003827.8511392345191
24 164d59'59.99997936397788" 166d25'16.2593819478948"   1000000.0001515200393
25   3d22'19.5694402667547"  176d45'41.43721792855263" 19661438.0251956080829
26  90d00'00.00891264563132"  90d00'00.00891264563132" 19996104.3689008382234
\endverbatim

\section geoderrors Accuracy of geodesic calculation

We regard all the test data as "exact".  For each member of the test
set, 7 error distances are computed.
 -# Compute the direct problem from point 1, compare position of
    resulting point 2 with the exact result.
 -# Using point 2 and its azimuth given in (1), run the geodesic
    backward to recompute point 1.  Compare this with the original
    point 1.
 -# Similar to (1) with points 1 and 2 interchanged.
 -# Similar to (2) with points 1 and 2 interchanged.
 -# Solve the inverse problem between points 1 and 2.  Compare the
    distance with the exact result.
 -# Using the azimuth at point 1 found in (5), compute the direct
    problem from point 1 and compare the position of the resulting point
    2 with the exact result.
 -# Similar to (6) with points 1 and 2 interchanged.
 .
To guard against a canceling error, the calculations in (2), (4), (6),
and (7) use a long double version of the direct geodesic calculation
(which is about 2000 times more accurate than the double version).  The
maximum of the resulting errors in less than 12 nm for the double
version and 6 pm for the long double version.

None of the checks listed above directly compares the computed azimuths
with the exact values.  The problem is that tiny changes in the
positions of the points may sometimes lead to large changes in azimuths.
Obvious examples of this are when the two points are close to opposite
poles or when they are very close to each other.

A less obvious case is when the latitudes of the two points are equal
and opposite and the azimuths are close to +/- 90<sup>o</sup>.  For
example, consider to points on the WGS84 ellipsoid
 - Point 1: 30N 0E
 - Point 2a: 30S 179.47701999975666E
 - Point 2b: 29.999999999999996S 179.47701999975666E
 .
The two endpoints 2a and 2b are about 0.4nm apart and consequently the
two geodesics (from 1 to 2a and from 1 to 2b) are very nearly the same
length.  However the azimuths at point 1 are
 - Point 1 to 2a: 89.999991621683687489
 - Point 1 to 2b: 89.998510960829763754
 - difference: -5.3"

and the two geodesics are separated by about 160 m at their midpoints.

So instead of directly quoting the errors in the azimuths, we must use
the back-to-front formulation: The azimuths returned are the correct
azimuths for some geodesic with end-points within 12 nm of the given
end-points.

\section geodtodo Loose ends on geodesics

When either point is at a pole, the azimuth is defined by keeping the
longitude fixed and writing \e lat = 90 - \e eps or -90 + \e eps and
taking the limit \e eps -> 0 from above.

The following prescription allows you to ascertain when there are
multiple solutions to the inverse problem and to generate the complete
set.
 - \e lat1 = \e -lat2 (with neither at a pole).  If \e azi1 = \e azi2
   then the geodesic is unique.  Otherwise there are two geodesics and
   the second one is obtained by setting [\e azi1, \e azi2] = [\e azi2,
   \e azi1].  (This occurs when the longitude difference is near +/-
   180<sup>o</sup>.)
 - Points 1 and 2 at opposite poles.  There are infinitely many
   geodesics which can be generated by setting [\e azi1, \e azi2] = [\e
   azi1, \e azi2] + [\e d, -\e d], for arbitrary \e d.
 - \e s12 = 0 (coincident points).  There are infinitely many geodesics
   which can be generated by setting [\e azi1, \e azi2] = [\e azi1, \e
   azi2] + [\e d, \e d], for arbitrary \e d.

A rather large fraction of the code in GeographicLib::Geodesic deals
merely with the spherical trigonometry required to do great circle
calculations.  When high accuracy is required, care has to be taken to
use stable methods for computing angles.  Typically, we represent angles
internally with the pair [sin(\e theta), cos(\e theta)].  This expands
the number of representable angles by about 4; in particular, it allows
angles very close to all the cardinal points to be resolved.  We use
expressions for sin(\e theta) and cos(\e theta) which avoid large
cancellations.  Having a comprehensive test set as described in \ref
testgeod helps to identify problems.  This representation allows input
arguments which are multiples of 90<sup>o</sup> to be represented
exactly.

The code for the inverse treats equatorial and meridional geodesics
specially.  All other case are handled by the same code (implementing
Newton's method) with tests to select appropriate starting guess in
difference regimes.  Specifying a zero inverse flattening in Geodesic
constructor is equivalent to zero flattening (i.e., a sphere).  The
method accommodates this case without any special coding.

In order to limits the enumeration of cases, the inverse problem is
brought to a canonical form by interchanging the points and changing the
signs of the coordinates.  The effect of these changes are undone at the
end by applying sign changes to the final calls to atan2 to give the
azimuths.

The evaluation of the derivative for Newton's method for the inverse
problem is a straightforward application of the chain rule for
derivatives.  In evaluating the derivative of the longitude function,
the derivative with respect to cos<sup>2</sup> \e alpha is carried out by
differentiating the series.  However the derivative with respect to \e
sigma (the limit of the integral) just gives the integrand.

Geographic coordinates which are close to zero are quantized (by adding
and subtracting 1/16).  This allows certain cases of underflow to be
avoided.  This limits the accuracy to which coordinates can be specified
to 0.7 pm.  This should not be a problem since the overall accuracy of
the algorithms is only 12 nm.

GeodesicLine::Position provides a way of doing a series of direct
calculations for a single geodesic.  This is about 2.5 faster than
calling Geodesic::Direct.  On a 2.6 GHz Intel machine (g++, version
4.3.0, -O3), calls to Geodesic::Direct take 1.1 us, calls to
GeodesicLine::Position take 0.44 us, and calls to Geodesic::Inverse take
3.4 us.

Future work:
 - The use of 8th order series is overkill.  (At this order, the long
   double calculation is still accurate.)  I will generate the code for
   all orders 4 (approximately corresponding to Vincenty) thru 8 and
   make them selectable through preprocessor macros.
 - The mean number of Newton's iterations is about 3.  However in some
   cases more than 20 iterations are required.  Improved starting points
   are needed.
 - I'll provide the Maxima code used to generate the series and further
   documentation.

<center>
Back to \ref transversemercator.  Forward to \ref geocentric.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geocentric Geocentric coordinates

<center>
Back to \ref geodesic.  Forward to \ref utilities.  Up to \ref contents.
</center>

The implementation of GeographicLib::Geocentric::Reverse is adapted from
 - H. Vermeille,
   <a href="http://dx.doi.org/10.1007/s00190-002-0273-6">
   Direct transformation from geocentric coordinates to geodetic
   coordinates</a>, J. Geodesy 76, 451&ndash;454 (2002).

This provides a closed-form solution but can't directly be applied close to
the center of the earth.  Several changes have been made to remove this
restriction and to improve the numerical accuracy.  Now the method is
accurate for all inputs (even if \e h is infinite).

The problems encountered near the center of the ellipsoid are:
 - There's a potential division by zero in the definition of \e s. The
   equations are easily reformulated to avoid this problem.
 - \e t<sup>3</sup> may be negative.  This is OK; we just take the real root.
 - The solution for \e t may be complex.  However this leads to 3 real roots
   for \e u/\e r.  It's then just a matter of picking the one that computes
   the geodetic result which minimizes |\e h| and which avoids large
   round-off errors.
 - Some of the equations result in a large loss of accuracy due to
   subtracting nearly equal quantities.  E.g., \e k= sqrt(\e u + \e v + \e
   w<sup>2</sup>) - \e w is inaccurate if \e u + \e v is small; we can fix
   this by writing \e k = (\e u + \e v)/(sqrt(\e u + \e v + \e w<sup>2</sup>)
   + \e w).

The error is computed as follows.  Write a version of
Geocentric::WGS84.Forward which uses long doubles (including using long
doubles for the WGS84 parameters).  Generate random (long double) geodetic
coordinates (\e lat0, \e lon0, \e h0) and use the "long double"
WGS84.Forward to obtain the corresponding (long double) geocentric
coordinates (\e x0, \e y0, \e z0).  [We restrict \e h0 so that \e h0 >= - \e
a (1 - \e e<sup>2</sup>) / sqrt(1 - \e e<sup>2</sup> sin<sup>2</sup>\e
lat0), which ensures that (\e lat0, \e lon0, \e h0) is the principal
geodetic inverse of (\e x0, \e y0, \e z0).]  Because the forward calculation
is numerically stable and because long doubles (on Linux systems using g++)
provide 11 bits additional accuracy (about 3.3 decimal digits), we regard
this set of test data as exact.

Apply the double version of WGS84.Reverse to (\e x0, \e y0, \e z0) to
compute the approximate geodetic coordinates (\e lat1, \e lon1, \e h1).
Convert (\e lat1 - \e lat0, \e lon1 - \e lon0) to a distance, \e ds, on the
surface of the ellipsoid and define \e err = hypot(\e ds, \e h1 - \e h0).
For |\e h0| < 5000 km, we have \e err < 7 nm.

This methodology is not very useful very far from the globe, because the
absolute errors in the approximate geodetic height become large, or within
50 km of the center of the earth, because of errors in computing the
approximate geodetic latitude.  To illustrate the second issue, the maximum
value of \e err for \e h0 < 0 is about 80 mm.  The error is maximum close to
the circle given by geocentric coordinates satisfying hypot(\e x, \e y) = \e
a \e e<sup>2</sup> (= 42.7 km), \e z = 0.  (This is the center of meridional
curvature for \e lat = 0.)  The geodetic latitude for these points is \e lat
= 0.  However, if we move 1 nm towards the center of the earth, the geodetic
latitude becomes 0.04", a distance of 1.4 m from the equator.  If, instead,
we move 1 nm up, the geodetic latitude becomes 7.45", a distance of 229 m
from the equator.  In light of this, Reverse does quite well in this
vicinity.

To obtain a practical measure of the error for the general case we define
- <i>err</i><sub>h</sub> = |\e h1 - \e h0| / max(1, \e h0 / \e a)
- for \e h0 > 0, <i>err</i><sub>out</sub> = \e ds
- for \e h0 < 0, apply the long double version of WGS84.Forward to (\e lat1,
  \e lon1, \e h1) to give (\e x1, \e y1, \e z1) and compute
  <i>err</i><sub>in</sub> = hypot(\e x1 - \e x0, \e y1 - \e y0, \e z1 - \e
  z0).
.
We then find <i>err</i><sub>h</sub> < 8 nm, <i>err</i><sub>out</sub> < 4 nm,
and <i>err</i><sub>in</sub> < 7 nm.

The testing has been confined to the WGS84 ellipsoid.  The method will work
for all ellipsoids used in terrestrial geodesy.  However, the central region,
which leads to multiple real roots for the cubic equation in Reverse, pokes
outside the ellipsoid (at the poles) for ellipsoids with \e e > 1/sqrt(2).
Reverse has not been analysed for this case.  Similarly ellipsoids which are
very nearly spherical near yield inaccurate results due to underflow; in the
other hand, the case of the sphere, \e f = 0, is treated specially and gives
accurate results.

Another comparable method is T. Fukushima,
<a href="http://dx.doi.org/10.1007/s001900050271"> Fast transform from
geocentric to geodetic coordinates</a>, J. Geodesy 73, 603&ndash;610 (2003).
This is an iterative method and is somewhat faster than Geocentric.Reverse.
However, because of the choice of independent variable in Newton's
iteration, accuracy is lost for points near the equatorial plane.  As a
consequence, the maximum error \e err near the center of meridional
curvature for \e lat = 0 is about 50 m (as opposed to 8 mm for
WGS84.Reverse).

<center>
Back to \ref geodesic.  Forward to \ref utilities.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page utilities Utility Programs

<center>
Back to \ref geocentric.  Forward to \ref old.  Up to \ref contents.
</center>

\section geoconvert GeoConvert

GeoConvert is a command line utility for geographic coordinate
conversions via GeographicLib::GeoCoords.

Examples:
 - echo 33.3 44.4 | ./GeoConvert -u\n=> 38N 444141 368470
 - echo 33.3 44.4 | ./GeoConvert -m -p -3\n=> 38SMB4484

Compile with "make GeoConvert" or with

g++ -g -O3 -I.. -o GeoConvert GeoConvert.cpp GeoCoords.cpp MGRS.cpp
UTMUPS.cpp DMS.cpp Constants.cpp TransverseMercator.cpp
PolarStereographic.cpp

Here is the usage (obtained from "GeoConvert -h")
\verbatim
Usage: GeoConvert [-g|-d|-u|-m|-c] [-p prec] [-z zone] [-s] [-h]

Convert geographic coordinates to

    -g latitude and longitude (decimal degrees), default output
    -d latitude and longitude (degrees mins secs)
    -u UTM or UPS
    -m MGRS
    -c meridian convergence and scale

The WGS84 model of the earth is used.  Geographic coordinates are given on
standard input as:

Latitude and longitude (decimal degrees or degrees minutes seconds).  d,
', and " are used to denote degrees, minutes, and seconds, with the least
significant designator optional.  Latitude is given first unless a
hemisphere is specified, e.g., the following are all equivalent

    33.3 44.4
    E44.4 N33.3
    33d18'N 44d24'E
    44d24 33d18N

UTM or UPS given as zone+hemisphere easting northing or easting northing
zone+hemisphere.  The zone is absent for a UPS specification.  E.g.,

    38N 444140.54 3684706.36
    444140.54 3684706.36 38N
    S 2173854.98 2985980.58
    2173854.98 2985980.58 S

MRGS is used to specify the center of a grid square, e.g.,

    38SMB4484
    38SMB44140847064

-p prec (default 0) sets the precision relative to 1m.  This gives the
number of digits after the decimal point for UTM/UPS.  The number of digits
per coordinate for MGRS is 5 + prec.  For decimal degrees, the number of
digits after the decimal point is 5 + prec.  For DMS (degree, minute,
seconds) output, the number of digits after the decimal point in the
seconds components is 1 + prec; if this is negative then use minutes (prec
= -2 or -3) or degrees (prec <= -4) as the least significant component.
Print convergence, resp. scale, with 5 + prec, resp. 7 + prec, digits after
the decimal point.  The minimum value of prec is -5 and the maximum is 9
for UTM/UPS, 9 for decimal degrees, 10 for DMS, 6 for MGRS, and 8 for
convergence and scale.

MGRS coordinates are given by truncating (instead of rounding) the
coordinates to the requested precision.  For example is prec = -3, the
result is the 1km square enclosing the position.

Convergence is the bearing of grid north given as degrees clockwise from
true north.

UTM/UPS and MGRS are given in zone of the input if applicable, otherwise in
the standard zone.

-z zone sets the zone for output.  Use zone = 0 to specify UPS.

-s uses the standard zone.

For example, the point

    79.9S 6.1E

corresponds to possible MGRS coordinates

    32CMS4324728161 (standard UTM zone = 32)
    31CEM6066227959 (neighboring UTM zone = 31)
      BBZ1945517770 (neighboring UPS zone)

then
    echo 79.9S 6.1E      | GeoConvert -p -3 -m       ==> 32CMS4328
    echo 31CEM6066227959 | GeoConvert -p -3 -m       ==> 31CEM6027
    echo 31CEM6066227959 | GeoConvert -p -3 -m -s    ==> 32CMS4328
    echo 31CEM6066227959 | GeoConvert -p -3 -m -z 0  ==>   BBZ1917

-h prints this help.
\endverbatim

\section transversemercatortest TransverseMercatorTest

TransverseMercatorTest is a command line utility for testing
GeographicLib::TransverseMercatorExact and
GeographicLib::TransverseMercator.

Examples:
 - echo 0 90 | ./TransverseMercatorTest\n=>
   0 90 25953592.84 9997964.94 90 18.40
 - echo 260e5 100e5 | ./TransverseMercatorTest -r\n=>
   -0.02 90.00 26000000 10000000 90.01 18.47

Compile with "make TransverseMercatorTest" or with

g++ -g -O3 -I.. -o TransverseMercatorTest TransverseMercatorTest.cpp
TransverseMercatorExact.cpp Constants.cpp EllipticFunction.cpp
TransverseMercator.cpp

Note that, unlike \ref geoconvert, TransverseMercatorTest has no
facility for dealing with angles in degrees, minutes, and seconds, and
no ability to change the precision of the output.

Here is the usage (obtained from "TranverseMercatorTest -h")
\verbatim
TransverseMercatorTest [-r] [-t|-s]

Convert between geographic coordinates and transverse Mercator coordinates.

Read lines with latitude and longitude (or easting and northing if -r is
specified) from standard input and print latitude, longitude, easting,
northing, convergence, and scale.  Units are degrees and meters.

By default, the WGS84 is ellipsoid is used, central meridian = 0, UTM
central scale, and false easting and false northing are zero.

If -r is given, the reverse projection is performed (the inputs are easting
and northing).

If -s is given, the sixth-order Krueger series approximation to the
transverse Mercator projection is used instead of the exact projection.

If -t is specified, an ellipsoid of eccentricity 0.1 is used, central scale
= 1, 1/4 meridian distance = 1.  In addition, the cut in the exact
transverse Mercator projection at northing = 0 is removed.  The domain of
latitude (lat) and longitude (lon) is the union of
    lat in [0, 90]  and lon in [0, 90]
    lat in (-90, 0] and lon in [81, 90]
The domain of easting (x) and northing (x) is the union of
    x in [0, inf)       and y in [0, 1]
    x in [1.71..., inf) and y in (-inf, 0]

-s and -t are mutually exclusive (the last flag specified is the operative
one).

-h prints this help.
\endverbatim

\section geod Geod

Geod is a command line utility for geodesic calculations.

Example (route from JFK Airport to Singapore Changi Airport)
 - echo "40d38'23N" "073d46'44W" "01d21'33N" "103d59'22E" |\n
   ./Geod -i -d -p 0\n
   => 003d18'29.9" 177d29'09.2" 15347628
 - for ((i = 0; i <= 16; i += 2)); do echo ${i}000000;done |\n
   ./Geod -l "40d38'23N" "073d46'44W" "003d18'29.9" -d -p 0\n
   => way points at intervals of 2000 km on route\n
   40d38'23.0"N 073d46'44.0"W 003d18'29.9"\n
   58d34'45.1"N 071d49'36.7"W 004d48'48.8"\n
   76d22'28.4"N 065d32'17.8"W 010d41'38.4"\n
   84d50'28.0"N 075d04'39.2"E 150d55'00.9"\n
   67d26'20.3"N 098d00'51.2"E 173d27'20.3"\n
   49d33'03.2"N 101d06'52.6"E 176d07'54.3"\n
   31d34'16.5"N 102d30'46.3"E 177d03'08.4"\n
   13d31'56.0"N 103d26'50.7"E 177d24'55.0"\n
   04d32'05.7"S 104d14'48.7"E 177d28'43.6"

Compile with "make Geod" or with

g++ -g -O3 -I.. -o Geod Geod.cpp Geodesic.cpp DMS.cpp Constants.cpp

Here is the usage (obtained from "Geod -h")

\verbatim
Usage: Geod [-l lat1 lon1 azi1 | -i] [-n] [-d] [-f] [-p prec] [-h]

Perform geodesic calculations.

The shortest path between two points on the ellipsoid at (lat1, lon1)
and (lat2, lon2) is called the geodesic.  Its length is s12 and the
geodesic from point 1 to point 2 has azimuths azi1 and azi2 at the two
end points.

Geod operates in one of three modes:

(1) It accepts lines on the standard input containing "lat1 lon1 azi1
    s12" and prints "lat2 lon2 azi2" on standard output.  This is the
    direct geodesic calculation.

(2) Command line arguments "-l lat1 lon1 azi1" specify a geodesic line.
    Geod then accepts a sequence of s12 values (one per line) on
    standard input and prints "lat2 lon2 azi2" for each.  This generates
    a sequence of points on a single geodesic.

(3) With the -i command line argument, Geod performs the inverse
    geodesic calculation.  It reads lines containing "lat1 lon1 lat2
    lon2" and prints the corresponding values of "azi1 azi2 s12".

By default, the WGS84 ellipsoid is used.  With the -n option, it uses
the international ellipsoid (major radius 6378388 m, inverse flattening
297).

Output of angles is as decimal degrees.  If -d is specified the output
is as degrees, minutes, seconds.  Input can be in either style.  d, ',
and " are used to denote degrees, minutes, and seconds, with the least
significant designator optional.  By default, latitude precedes
longitude for each point; however on input either may be given first by
appending N or S to the latitude and E or W to the longitude.  s12 is
always given in meters.

The output lines consist of the three quantities needs to complete the
specification of the geodesic.  With the -f option, each line of output
is a complete geodesic specification consisting of seven quantities

    lat1 lon1 azi1 lat2 lon2 azi2 s12

-p prec (default 3) gives the precision of the output relative to 1m.
The minimum value of prec is 0 (1 m accuracy) and the maximum value is
10 (0.1 nm accuracy, but then the last digits are unreliable).

-h prints this help.
\endverbatim

\section cartconvert CartConvert

CartConvert is a command line utility for geodetic to cartesian
coordinate conversions via GeographicLib::Geocentric and
GeographicLib::LocalCartesian.

Examples:
 - echo 33.3 44.4 6000 | ./CartConvert\n=>
   3816209.60 3737108.55 3485109.57
 - echo 33.3 44.4 6000 | ./CartConvert -l 33 44 20\n=>
   37288.97 33374.29 5783.64
 - echo 30000 30000 0 | ./CartConvert -r\n=>
   6.483 45 -6335709.73

Compile with "make CartConvert" or with

g++ -g -O3 -I.. -o CartConvert CartConvert.cpp Geocentric.cpp
LocalCartesian.cpp Constants.cpp

Note that, unlike \ref geoconvert, CartConvert has no
facility for dealing with angles in degrees, minutes, and seconds, and
no ability to change the precision of the output.

Here is the usage (obtained from "CartConvert -h")
\verbatim
Usage: CartConvert [-r] [-l lat0 lon0 h0] [-h]

Convert geodetic coordinates to either geocentric or local cartesian
coordinates.  Geocentric coordinates have the origin at the center of the
earth, with the z axis going thru the north pole, and the x axis thru lat =
0, lon = 0.  By default, the conversion is to geocentric coordinates.
Specifying -l lat0 lon0 h0 causes a local coordinate system to be used with
the origin at latitude = lat0, longitude = lon0, height = h0, z normal to
the ellipsoid and y due north.  The WGS84 model of the earth is used.

Geodetic coordinates are provided on standard input as a set of lines
containing (blank separated) latitude, longitude (decimal degrees), and
height (meters).  For each set of geodetic coordinates, the corresponding
cartesian coordinates x, y, z (meters) are printed on standard output.

If -r is given the reverse transformation is performed.

-h prints this help
\endverbatim

<center>
Back to \ref geocentric.  Forward to \ref old.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page old Old Versions

<center>
Back to \ref utilities.  Up to \ref contents.
</center>

List of versions in reverse chronological order together with a brief
list of changes.

 - <a href="http://charles.karney.info/geographic/Geographic.tgz">2009-03
   (current)</a>
  - Add Geographic::Geodesic and the \ref geod utility.
  - Declare when no exceptions are thrown by functions.
  - Minor changes to GeographicLib::DMS class.
  - Use invf = 0 to mean a sphere in constructors to some classes.
  - The makefile creates a library and includes an install target.
  - Rename Geographic::ECEF to Geographic::Geocentric, ECEFConvert to
    \ref cartconvert.
  - Use inline functions to define constant doubles in Constants.hpp.

 - <a href="http://charles.karney.info/geographic/Geographic-2009-02.tgz">2009-02</a>
  - Fix documentation of constructors (flattening -> inverse
    flattening).
  - Use std versions of math functions.
  - Add GeographicLib::ECEF and GeographicLib::LocalCartesian classes
    and the ECEFConvert utility.
  - Gather the documentation on the utility programs onto one page.

 - <a href="http://charles.karney.info/geographic/Geographic-2009-01.tgz">2009-01</a>
  - First proper release of library
  - More robust GeographicLib::TransverseMercatorExact
    - Introduce \e extendp version of constructor
    - Test against extended test data
    - Optimize starting positions for Newton's method
    - Fix behavior near all singularities
    - Fix order dependence in C++ start-up code
  - Documentation on transverse Mercator projection
    - Improved method of computing scale and convergence
  - Add GeographicLib::MGRS, GeographicLib::UTMUPS, etc.

 - 2008-09
  - Ad hoc posting of information on the transverse Mercator
    projection

<center>
Back to \ref utilities.  Up to \ref contents.
</center>
**********************************************************************/
